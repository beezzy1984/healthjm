#!/usr/bin/env python
# -*- coding: utf-8 -*-
# export_access_groups_to_xml.py
"""
Export Access Groups to XML files.
Task: http://thymbra.com/mantis/view.php?id=8803
"""
import sys
import codecs

from proteus import Model
from proteus import config as pconfig

SERVER = 'health.gnu.org:8551'
DATABASE = 'jamaicadev'
USERNAME = 'admin'
PASSWORD = 'PublicHealth'
TRYTOND_PATH = '/home/sebastian/src/tryton3/trytond-3.0.0/trytond'
OUTPUT = 'access_rights.xml'
sys.path.append(TRYTOND_PATH)


def set_config(database, password):
    return pconfig.set_trytond(database, password=password)


def create_group():
    Group = Model.get('res.group')
    groups = Group.find([('create_uid', '=', 1)])

    template = """
        <record model="res.group" id="%(id)s">
            <field name="name">%(name)s</field>
        </record>\n"""

    record = ''
    xml_str = """
    <!--
    Groups
    -->\n"""
    for group in groups:
        print group.name
        record += "    <!--\n    " + group.name + "\n    -->\n"
        record += template % {
            'id': 'group_%s' % group.id,
            'name': group.name,
        }
        record += create_group_menu(group, group.menu_access) + '\n'
        record += create_group_model_access(group, group.model_access) + '\n'
        record += create_group_field_access(group, group.field_access) + '\n'
    xml_str += record
    return xml_str


def create_group_menu(group, menu_access):
    ModelData = Model.get('ir.model.data')

    template = """
        <record model="ir.ui.menu-res.group" id="%(id)s">
            <field name="menu" ref="%(menu)s"/>
            <field name="group" ref="%(group)s"/>
        </record>\n"""

    record = ''
    ids = []
    for menu in menu_access:
        if not menu.id in ids:
            ids.append(menu.id)
            modeldata, = ModelData.find([
                ('model', '=', 'ir.ui.menu'),
                ('db_id', '=', menu.id),
                ])
            record += template % {
                'id': 'menu_%s_group_%s' % (menu.id, group.id),
                'menu': modeldata.module + '.' + modeldata.fs_id,
                'group': 'group_%s' % group.id,
            }
    return record


def create_group_model_access(group, model_access):
    template = """
        <record model="ir.model.access" id="%(id)s">
            <field name="model" search="[('model', '=', '%(model)s')]"/>
            <field name="group" ref="%(group)s"/>
            <field name="perm_read" eval="%(perm_read)s"/>
            <field name="perm_write" eval="%(perm_write)s"/>
            <field name="perm_create" eval="%(perm_create)s"/>
            <field name="perm_delete" eval="%(perm_delete)s"/>
        </record>\n"""

    record = ''
    ids = []
    for model in model_access:
        if not model.model.id in ids:
            ids.append(model.model.id)
            record += template % {
                'id': 'access_%s_group_%s' % (model.model.id, group.id),
                'model': model.model.model,
                'group': 'group_%s' % group.id,
                'perm_read': model.perm_read and 'True' or 'False',
                'perm_write': model.perm_write and 'True' or 'False',
                'perm_create': model.perm_create and 'True' or 'False',
                'perm_delete': model.perm_delete and 'True' or 'False',
            }
    return record


def create_group_field_access(group, field_access):
    template = """
        <record model="ir.model.field.access" id="%(id)s">
            <field name="field" search="[('name', '=', '%(field)s'), 
                ('model.model', '=', '%(model)s')]"/>
            <field name="group" ref="%(group)s"/>
            <field name="perm_read" eval="%(perm_read)s"/>
            <field name="perm_write" eval="%(perm_write)s"/>
            <field name="perm_create" eval="%(perm_create)s"/>
            <field name="perm_delete" eval="%(perm_delete)s"/>
        </record>\n"""

    record = ''
    for field in field_access:
        record += template % {
            'id': 'field_%s_group_%s' % (field.field.id, group.id),
            'field': field.field.name,
            'model': field.field.model.model,
            'group': 'group_%s' % group.id,
            'perm_read': field.perm_read and 'True' or 'False',
            'perm_write': field.perm_write and 'True' or 'False',
            'perm_create': field.perm_create and 'True' or 'False',
            'perm_delete': field.perm_delete and 'True' or 'False',
        }
    return record


def main():
    config = pconfig.set_xmlrpc(
        'http://'+USERNAME+':'+PASSWORD+'@'+SERVER+'/'+DATABASE)

    print """\n>> Processing..."""  # MESSAGE

    template = """<?xml version="1.0"?>
<tryton>
    <data>\n%s\n
    </data>
</tryton>"""
    group_str = create_group()

    xml_str = template % (group_str, )
    with codecs.open(OUTPUT, 'w', 'utf-8') as xml_file:
        xml_file.write(xml_str)

    print """\n>> Finished."""  # MESSAGE


if __name__ == '__main__':
    main()
